<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "item_transfer".
 *
 * @property integer $id
 * @property integer $qautity
 * @property string $price_buy
 * @property integer $product_transfer_id
 * @property integer $products_id
 *
 * @property \app\models\ProductTransfer $productTransfer
 * @property \app\models\Products $products
 * @property string $aliasModel
 */
abstract class Itemtransfer extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'item_transfer';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['qautity', 'product_transfer_id', 'products_id'], 'integer'],
            [['price_buy', 'product_transfer_id', 'products_id'], 'required'],
            [['price_buy'], 'string', 'max' => 45],
            [['product_transfer_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\ProductTransfer::className(), 'targetAttribute' => ['product_transfer_id' => 'id']],
            [['products_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Products::className(), 'targetAttribute' => ['products_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'qautity' => Yii::t('models', 'Qautity'),
            'price_buy' => Yii::t('models', 'Price Buy'),
            'product_transfer_id' => Yii::t('models', 'Product Transfer ID'),
            'products_id' => Yii::t('models', 'Products ID'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductTransfer()
    {
        return $this->hasOne(\app\models\ProductTransfer::className(), ['id' => 'product_transfer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasOne(\app\models\Products::className(), ['id' => 'products_id']);
    }




}
